{"tagline":"Event Command Mapping System for Objective-C","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"## Gummi Commander\r\n![Gummi Commander Logo](http://sschmid.com/Libs/Gummi-Commander/Gummi-Commander-128.png)\r\n\r\nGummi Commander is an Event Command Mapping System for Objective-C.\r\nIt uses [Gummi Injection] for Dependency Injection and [Gummi Dispatcher] as a Messaging System.\r\n\r\n## Features\r\n* Execute multiple commands by dispatching one event\r\n* Add mappings with priority\r\n* Prevent certain commands to execute, by adding Guards\r\n* Inject the corresponding event and other objects of interest into commands\r\n\r\n## Set up Gummi Commander\r\nYou can get started by simply allocating a commandMap.\r\n\r\nThe recommended way to use Gummi Commander is to put your configuration logic into extensions (GCGIExtension) and add them to the Injector.\r\nThe provided GummiCommanderModule should be added first.\r\n\r\n```objective-c\r\nGIInjector *injector = [GIInjector sharedInjector];\r\n[injector addModule:[[GummiCommanderModule alloc] init]];\r\n\r\n[injector addModule:[[ApplicationExtension alloc] init]];\r\n\r\n// Maybe add this extension later in the code,\r\n// right before the game starts\r\n[injector addModule:[[GameExtension alloc] init]];\r\n```\r\n\r\n## The CommandMap\r\nWhen an instance of MyEvent gets dispatched, all mapped commands get executed\r\n```objective-c\r\n[commandMap mapCommand:[MyCommand class] toEvent:[MyEvent class]];\r\n[commandMap mapCommand:[MyOtherCommand class] toEvent:[MyEvent class]\r\n                          removeMappingAfterExecution:YES];\r\n\r\n[commandMap mapCommand:[ACommand class] toEvent:[MyEvent class]\r\n                                       priority: 5];\r\n\r\n[commandMap mapCommand:[AnOtherCommand class] toEvent:[MyEvent class]\r\n                                             priority: 10];\r\n```\r\n\r\n* Commands are short lived objects.\r\n* Commands get created and executed when dispatching an event.\r\n* Commands can inject the corresponding event, models and more...\r\n* Commands get destroyed immediately after execution.\r\n\r\n## Guards\r\n* Guards do only one thing: approve.\r\n* Guards decide, whether a command gets executed or not.\r\n* Only when all guards approve, a command gets executed.\r\n\r\n#### You can add guards like this:\r\n```objective-c\r\n[[commandMap mapCommand:[ServerResponseCommand class]\r\n                toEvent:[ServerResponseEvent class]]\r\n             withGuards:@[[ServerResponseGuard class]]];\r\n```\r\n\r\n## Extension\r\nPut related configuration logic into extensions and add and remove them at will\r\n```objective-c\r\n@implementation ServiceExtension\r\n\r\n- (void)configure:(GIInjector *)injector {\r\n    [super configure:injector];\r\n\r\n    // Map commands to events\r\n    [[self mapCommand:[ServerResponseCommand class]\r\n              toEvent:[ServerResponseEvent class]]\r\n           withGuards:@[[ServerResponseGreater500Guard class]]];\r\n\r\n    // Set injection rules\r\n    [self mapEagerSingleton:[Service class] to:[Service class]];\r\n}\r\n\r\n- (void)unload {\r\n    Service *service = [_injector getObject:[Service class]];\r\n    [service close];\r\n\r\n    // All mappings from the CommandMap and the Injector made\r\n    // in this module get removed automatically.\r\n\r\n    [super unload];\r\n}\r\n```\r\n## Other projects using Gummi Commander\r\n\r\nIf you enjoy using Gummi Commander in your projects let me know, and I'll mention your projects here.\r\n\r\n[Gummi Injection]: http://sschmid.github.com/Gummi-Injection/\r\n[Gummi Dispatcher]: http://sschmid.github.com/Gummi-Dispatcher/\r\n","name":"Gummi Commander","google":""}